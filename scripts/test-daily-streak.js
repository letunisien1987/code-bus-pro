const fs = require('fs')
const path = require('path')

// Simuler la fonction calculateDailyStreak
function calculateDailyStreak(attempts, examHistory) {
  // R√©cup√©rer toutes les dates d'activit√© (tentatives + examens)
  const activityDates = new Set()
  
  // Ajouter les dates des tentatives
  attempts.forEach(attempt => {
    if (attempt.createdAt) {
      const date = new Date(attempt.createdAt).toISOString().split('T')[0]
      activityDates.add(date)
    }
  })
  
  // Ajouter les dates des examens
  examHistory.forEach(exam => {
    if (exam.completedAt) {
      const date = new Date(exam.completedAt).toISOString().split('T')[0]
      activityDates.add(date)
    }
  })
  
  // Trier les dates par ordre d√©croissant
  const sortedDates = Array.from(activityDates).sort().reverse()
  
  if (sortedDates.length === 0) return 0
  
  // Calculer la s√©rie en partant d'aujourd'hui
  const today = new Date().toISOString().split('T')[0]
  let streak = 0
  let currentDate = new Date(today)
  
  // V√©rifier si l'utilisateur a √©t√© actif aujourd'hui
  if (!sortedDates.includes(today)) {
    // Si pas actif aujourd'hui, v√©rifier hier
    currentDate.setDate(currentDate.getDate() - 1)
    const yesterday = currentDate.toISOString().split('T')[0]
    if (!sortedDates.includes(yesterday)) {
      return 0 // Pas de s√©rie si pas actif aujourd'hui ni hier
    }
    streak = 1 // Commencer √† 1 si actif hier mais pas aujourd'hui
  } else {
    streak = 1 // Actif aujourd'hui
  }
  
  // Continuer √† compter les jours pr√©c√©dents
  for (let i = 1; i < 100; i++) { // Limite √† 100 jours pour √©viter les boucles infinies
    currentDate.setDate(currentDate.getDate() - 1)
    const checkDate = currentDate.toISOString().split('T')[0]
    
    if (sortedDates.includes(checkDate)) {
      streak++
    } else {
      break // S√©rie bris√©e
    }
  }
  
  return streak
}

// Lire les donn√©es r√©elles
const ATTEMPTS_FILE = path.join(__dirname, '..', 'data', 'user-attempts.json')
const EXAM_HISTORY_FILE = path.join(__dirname, '..', 'data', 'exam-history.json')

let attempts = []
let examHistory = []

if (fs.existsSync(ATTEMPTS_FILE)) {
  const data = fs.readFileSync(ATTEMPTS_FILE, 'utf-8')
  attempts = JSON.parse(data)
}

if (fs.existsSync(EXAM_HISTORY_FILE)) {
  const data = fs.readFileSync(EXAM_HISTORY_FILE, 'utf-8')
  examHistory = JSON.parse(data)
}

console.log('üìä Test de la logique de s√©rie quotidienne')
console.log('=====================================')

// Afficher les dates d'activit√©
const activityDates = new Set()

attempts.forEach(attempt => {
  if (attempt.createdAt) {
    const date = new Date(attempt.createdAt).toISOString().split('T')[0]
    activityDates.add(date)
  }
})

examHistory.forEach(exam => {
  if (exam.completedAt) {
    const date = new Date(exam.completedAt).toISOString().split('T')[0]
    activityDates.add(date)
  }
})

const sortedDates = Array.from(activityDates).sort().reverse()
console.log(`üìÖ Dates d'activit√©: ${sortedDates.join(', ')}`)

// Calculer la s√©rie
const streak = calculateDailyStreak(attempts, examHistory)
console.log(`üî• S√©rie quotidienne: ${streak} jours`)

// V√©rifier les troph√©es de r√©gularit√©
console.log('\nüèÜ √âtat des troph√©es de r√©gularit√©:')
console.log(`   3 jours: ${streak >= 3 ? '‚úÖ D√©bloqu√©' : '‚ùå Verrouill√©'}`)
console.log(`   7 jours: ${streak >= 7 ? '‚úÖ D√©bloqu√©' : '‚ùå Verrouill√©'}`)
console.log(`   30 jours: ${streak >= 30 ? '‚úÖ D√©bloqu√©' : '‚ùå Verrouill√©'}`)
console.log(`   100 jours: ${streak >= 100 ? '‚úÖ D√©bloqu√©' : '‚ùå Verrouill√©'}`)

console.log('\nüìù Explication:')
console.log('- La s√©rie se calcule en partant d\'aujourd\'hui')
console.log('- Elle compte les jours cons√©cutifs d\'activit√©')
console.log('- L\'activit√© = tentatives d\'entra√Ænement OU examens')
console.log('- Si pas d\'activit√© aujourd\'hui, la s√©rie est bris√©e')

import { NextResponse } from 'next/server'
import { exec } from 'child_process'
import { promisify } from 'util'

const execAsync = promisify(exec)

/**
 * API Route pour initialiser la base de donn√©es PostgreSQL sur Vercel
 * √Ä appeler une seule fois apr√®s le d√©ploiement
 * URL: https://your-app.vercel.app/api/setup
 */
export async function POST() {
  try {
    console.log('üöÄ Initialisation de la base de donn√©es PostgreSQL...')
    
    // Push le sch√©ma Prisma vers la base
    const { stdout: pushOutput, stderr: pushError } = await execAsync('npx prisma db push --accept-data-loss')
    console.log('üìã Push output:', pushOutput)
    if (pushError) console.log('‚ö†Ô∏è Push stderr:', pushError)
    
    // Seed la base avec les donn√©es
    const { stdout: seedOutput, stderr: seedError } = await execAsync('npx prisma db seed')
    console.log('üå± Seed output:', seedOutput)
    if (seedError) console.log('‚ö†Ô∏è Seed stderr:', seedError)
    
    return NextResponse.json({
      success: true,
      message: 'Base de donn√©es initialis√©e avec succ√®s !',
      details: {
        push: pushOutput,
        seed: seedOutput
      }
    })
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error)
    return NextResponse.json({
      success: false,
      message: 'Erreur lors de l\'initialisation de la base de donn√©es',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'API Setup - Utilisez POST pour initialiser la base de donn√©es',
    instructions: [
      '1. Cr√©ez une base Postgres sur Vercel',
      '2. Connectez-la √† votre projet',
      '3. Appelez POST /api/setup',
      '4. La base sera initialis√©e avec le sch√©ma et les donn√©es'
    ]
  })
}

